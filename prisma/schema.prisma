generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model User {
    id                Int                 @id @default(autoincrement())
    firstName         String              @default("")
    lastName          String              @default("")
    bio               String              @default("")
    username          String?             @unique
    login             String              @unique
    password          String
    dateOfBirth       DateTime?
    ChatFolder        ChatFolder[]
    Session           Session[]
    Channel           Channel[]
    Group             Group[]
    GroupMember       GroupMember[]
    ChannelSubscriber ChannelSubscriber[]
    PrivacySettings   PrivacySettings[]
}

model Session {
    id         Int      @id @default(autoincrement())
    userId     Int
    token      String   @unique
    fcmToken   String?  @default("")
    deviceName String?  @default("")
    createdAt  DateTime @default(now())
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, token])
}

model Message {
    id                Int      @id @default(autoincrement())
    senderId          Int
    chatId            Int
    text              String
    sendTime          DateTime @default(now())
    isRead            Boolean  @default(false)
    deletedBySender   Boolean  @default(false)
    deletedByReceiver Boolean  @default(false)
}

model Chat {
    id         Int     @id @default(autoincrement())
    userId     Int
    chatId     Int
    chatType   Int
    isPinned   Boolean @default(false)
    isArchived Boolean @default(false)

    @@unique([userId, chatId])
}

model ChatFolder {
    id              Int               @id @default(autoincrement())
    userId          Int
    folderName      String
    user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
    ChatFolderChats ChatFolderChats[]
}

model ChatFolderChats {
    id         Int        @id @default(autoincrement())
    folderId   Int
    chatId     Int
    chatType   Int
    isPinned   Boolean    @default(false)
    chatFolder ChatFolder @relation(fields: [folderId], references: [id], onDelete: Cascade)

    @@unique([folderId, chatId])
}

model Channel {
    id                Int                 @id @default(autoincrement())
    name              String
    bio               String
    userId            Int
    user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
    ChannelSubscriber ChannelSubscriber[]
}

model ChannelSubscriber {
    id        Int     @id @default(autoincrement())
    userId    Int
    channelId Int
    user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

    @@unique([userId, channelId])
}

model Group {
    id          Int           @id @default(autoincrement())
    name        String
    bio         String
    userId      Int
    user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    GroupMember GroupMember[]
}

model GroupMember {
    id      Int   @id @default(autoincrement())
    groupId Int
    userId  Int
    user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
    group   Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

    @@unique([groupId, userId])
}

model PrivacySettings {
    id          Int  @id @default(autoincrement())
    userId      Int  @unique
    lastSeen    Int
    messages    Int
    bio         Int
    dateOfBirth Int
    invites     Int
    user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
